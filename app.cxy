import "stdlib/os.cxy"
import "stdlib/json.cxy"

import { SandboxConfig } from "./server/isolate.cxy"
import { Builder } from "./server/builder.cxy"
import { Server, Request, Response, Status, Method, SendFile, Cors } from "stdlib/http.cxy"

class ServerHandler {
    builder: Builder = null;

    func `init`(config: SandboxConfig) {
        this.builder = Builder(&&config)
    }

    func build(req: &const Request, resp: &Response): !void {
        var buildRequest = builder.parseBuildRequest(&req._body) catch {
            resp.end(Status.BadRequest)
            return
        }
    
        var result = builder.build(&buildRequest);
        json.toJSON(resp.body(), &result)
        resp.header("Content-Type", "application/json")
    }

    func run(req: &const Request, resp: &Response): !void {
        var buildRequest = builder.parseBuildRequest(&req._body) catch {
            resp.end(Status.BadRequest)
            return
        }
        var result = builder.run(&buildRequest);
        json.toJSON(resp.body(), &result)
        resp.header("Content-Type", "application/json")
    }

    func tests(req: &const Request, resp: &Response): !void {
        var buildRequest = builder.parseBuildRequest(&req._body) catch {
            resp.end(Status.BadRequest)
            return
        }
        var result = builder.tests(&buildRequest);
        json.toJSON(resp.body(), &result)
        resp.header("Content-Type", "application/json")
    }

    func source(req: &const Request, resp: &Response): !void {
        var buildRequest = builder.parseBuildRequest(&req._body) catch {
            resp.end(Status.BadRequest)
            return
        }
        var result = builder.source(&buildRequest);
        if (result.build.status != 0) {
            json.toJSON(resp.body(), &result.build)
            resp.header("Content-Type", "application/json")
            return
        }

        resp.header("Content-Type", "text/plain")
        resp.chunk(result.source.move())
    }

    func snippets(resp: &Response): !void {
        var fd = os.open("snippets.json")
        const size = fd.size();
        resp.chunk(&&fd, size)
        resp.header("Content-Type", "application/json")
    }

    func snippet(resp: &Response, id: &__string): !void {
        var path = String("snippets/");
        path << id << ".cxy"
        var fd = os.open(path.str())
        const size = fd.size();
        resp.chunk(&&fd, size)
        resp.header("Content-Type", "text/plain")
    }
}

func main(): !void {
    var handler = ServerHandler(SandboxConfig{
        cxyRoot: os.getenv("CXY_ROOT", "/cxy").str(),
        srcRoot: "/src",
    })

    var server = Server[(Cors)]();
    server("/build", (req: &const Request, resp: &Response) => {
        handler.build(req, resp) catch {
            resp.body() << ex!
            resp.end(Status.InternalError)
            return
        }
    })([Method.Post, Method.Options])

    server("/source", (req: &const Request, resp: &Response) => {
        handler.source(req, resp) catch {
            resp.body() << ex!
            resp.end(Status.InternalError)
        }
    })([Method.Post, Method.Options])

    server("/run", (req: &const Request, resp: &Response) => {
        handler.run(req, resp) catch {
            resp.body() << ex!
            resp.end(Status.InternalError)
        }
    })([Method.Post, Method.Options])

    server("/test", (req: &const Request, resp: &Response) => {
        handler.tests(req, resp) catch {
            resp.body() << ex!
            resp.end(Status.InternalError)
        }
    })([Method.Post, Method.Options])

    server("/snippets", (@unused _: &const Request, resp: &Response) => {
        handler.snippets(resp) catch {
            resp.body() << ex!
            resp.end(Status.InternalError)
        }
    })([Method.Get, Method.Options])

    server("/snippet/{id}", (req: &const Request, resp: &Response) => {
        const id = req.param("id")
        if (!id) {
            resp.end(Status.BadRequest)
            return
        }

        handler.snippet(resp, *id) catch {
            resp.body() << ex!
            resp.end(Status.InternalError)
        }
    })([Method.Get, Method.Options])

    server.start()
}
